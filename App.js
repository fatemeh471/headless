import React, { Component } from 'react';
import {
  StyleSheet, Text, View, TouchableOpacity,PermissionsAndroid, Image,AppState
} from 'react-native';
import { connect } from 'react-redux';
import Heartbeat from './Heartbeat';
import heart from './heart.png';
import SmsListener from 'react-native-android-sms-listener';
async function requestReadSmsPermission() {
  try {
    const granted = await PermissionsAndroid.request(
      PermissionsAndroid.PERMISSIONS.READ_SMS,
      {
        title: 'تایید خودکار کد فعال سازس',
        message:
          'ما برای تایید خودکار کد فعال سازی نیاز به دسترسی به پیامک های شما داریم',
      },
    );
    console.log(granted);
  } catch (err) {
    console.warn(err);
  }
}

async function requestReceiveSmsPermission() {
  try {
    const granted = await PermissionsAndroid.request(
      PermissionsAndroid.PERMISSIONS.RECEIVE_SMS,
      {
        title: 'تایید خودکار کد فعال سازس',
        message:
          'ما برای تایید خودکار کد فعال سازی نیاز به دسترسی به پیامک های شما داریم',
      },
    );
    console.log(granted);
  } catch (err) {
    console.warn(err);
  }
}




export default class App extends Component {

  constructor(props) {
    super(props);
    this.SMSReadSubscription = {};
    this.state = {
      appState: AppState.currentState,
    };
  }
  _handleAppStateChange = nextAppState => {
    if (
      this.state.appState.match(/inactive|background/) &&
      nextAppState === 'active'
    ) {
      console.log('App has come to the foreground!');
    }
    this.setState({appState: nextAppState});
  };                 

  async componentDidMount() {
  
    AppState.addEventListener('change', this._handleAppStateChange);
     await requestReadSmsPermission();
     await requestReceiveSmsPermission();

    this.SMSReadSubscription = SmsListener.addListener(message => {
      console.log("Message:", message);
      //message.body will have the message.
      //message.originatingAddress will be the address.
    });
  
  }
  async componentDidMount() {
    AppState.addEventListener('change', this._handleAppStateChange);
    await requestReadSmsPermission();
    await requestReceiveSmsPermission();

    this.SMSReadSubscription = SmsListener.addListener(message => {
      console.log(this.state.appState);
      try {
        PushNotification.localNotification({
          /* Android Only Properties */
          id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
          ticker: 'My Notification Ticker', // (optional)
          autoCancel: true, // (optional) default: true
          largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
          smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
          bigText: message?.body, // (optional) default: "message" prop
          subText: 'This is a subText', // (optional) default: none
          color: 'red', // (optional) default: system default
          vibrate: true, // (optional) default: true
          vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
          tag: 'some_tag', // (optional) add tag to message
          group: 'group', // (optional) add group to message
          ongoing: false, // (optional) set whether this is an "ongoing" notification
          priority: 'high', // (optional) set notification priority, default: high
          visibility: 'private', // (optional) set notification visibility, default: private
          importance: 'high', // (optional) set notification importance, default: high

          /* iOS only properties */
          // alertAction: // (optional) default: view
          // category: // (optional) default: null
          // userInfo: // (optional) default: null (object containing additional notification data)

          /* iOS and Android properties */
          title: message?.body, // (optional)
          message: message?.body, // (required)
          playSound: false, // (optional) default: true
          soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
          number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
          repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
          actions: '["Yes", "No"]', // (Android only) See the doc for notification actions to know more
        });
        // if (this.state.appState === 'background')
        //   LaunchApplication.open('com.rn61');
        // this.props.navigation.navigate('Test');

        console.log('Message:', message);
      } catch (e) {
        console.log(e);
      }
    });
  }

  componentWillUnmount() {
    AppState.removeEventListener('change', this._handleAppStateChange);
    this.SMSReadSubscription.remove();
  }

  componentWillUnmount() {
    AppState.removeEventListener('change', this._handleAppStateChange);
    this.SMSReadSubscription.remove();
  }
  render(){
  // const imageSize = heartBeat ? 150 : 100;

  
  return (
    <View style={styles.container}>
      <View style={styles.view}>
        <Image  resizeMode="contain" />
      </View>
      <View style={styles.view}>
        <TouchableOpacity style={styles.button} onPress={() => Heartbeat.startService()}>
          <Text style={styles.instructions}>Start</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.button} onPress={() => Heartbeat.stopService()}>
          <Text style={styles.instructions}>Stop</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.button} onPress={() => Heartbeat.sms()}>
          <Text style={styles.instructions}>Stop</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}
  }


const mapStateToProps = store => ({
  heartBeat: store.App.heartBeat,
});

// export default connect(mapStateToProps)(App);

const styles = StyleSheet.create({

  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'white',
  },
  view: {
    flex: 0.5,
    justifyContent: 'center',
    alignItems: 'center',
  },
  button: {
    backgroundColor: 'gray',
    padding: 10,
    margin: 10,
  },
  text: {
    fontSize: 20,
    color: 'white',
  },
});
